@using stack_overload.Models.ViewModels
@model QuestionIndexViewModel

@{
    string sortText = Model.SortedByDate ? "Sort by most answered" : "Sort by most recent";
}

<h1>Questions</h1>

<a asp-controller="questions" asp-action="index" asp-route-sortbymostanswered="@Model.SortedByDate">@sortText</a>

@foreach (QuestionSummaryViewModel questionSummary in Model.SummaryOfQuestions) {
    <div>
        <h3>
            <a
                asp-controller="questions"
                asp-action="details"
                asp-route-id="@questionSummary.Id"
            >@questionSummary.Title</a>
        </h3>

        <div>
            @foreach (Tag tag in questionSummary.Tags)
            {
                <span>
                    <a
                        asp-controller="questions"
                        asp-action="index"
                        asp-route-tag="@tag.Name"
                    >@tag.Name</a>
                </span>
            }

            <span> | </span>

            <span>@questionSummary.AnswersCount answers</span>
        </div>

        <p>@questionSummary.QuestionCreator</p>
    </div>
}

<div>
    @if (Model.CurrentPage > 1)
    {
        <span>
            <a
                asp-controller="questions"
                asp-action="index"
                asp-route-page="@(Model.CurrentPage - 1)"
                asp-route-tag="@Model.TagForSorting"
            >Prev</a>
        </span>
    }
    
    <span>@Model.CurrentPage</span>
    
    <span>
        <a
            asp-controller="questions"
            asp-action="index"
            asp-route-page="@(Model.CurrentPage + 1)"
            asp-route-tag="@Model.TagForSorting"
        >Next</a>
    </span>
</div>
